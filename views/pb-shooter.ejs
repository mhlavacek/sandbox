<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>HTML5 boilerplate – all you really need…</title>
  <link rel="stylesheet" href="css\app.css">
  <!--[if IE]>
  	<script src="http://html5shiv.googlecode.com/svn/trunk/html5.js"></script>
  <![endif]-->
  <style type="text/css">

  </style>
</head>

<body>
  <script type="text/javascript" src="js\vendor\jquery-1.11.1.min.js"></script>
  <script type="text/javascript" src="js\vendor\knockout-3.2.0.js"></script>
  <script type="text/javascript" src="js\vendor\jquery.form.min.js"></script>
  <script type="text/javascript" src="js\vendor\d3.v3.min.js" charset="utf-8"></script>
  <script type="text/javascript" src="js\vendor\SAT.min.js"></script>
  <script type="text/javascript" src="js\augment.js"></script>
  <script type="text/javascript" src="js\unit.js"></script>
  <script src="/socket.io/socket.io.js"></script>
  
  <div id="screen" style="width: 100%; height: 100%">
  </div>
  
  <script>
    $(function() {
      var io = window.io.connect('https://sandbox-joelhoward0.c9.io');
      var width = $('#screen').width();
      var height = $('#screen').height();
      var mousePosition = { x: 0, y: 0 };
      var mouseDown = false;
      var spacebar = false;
      var field = d3.select('#screen').append('svg');
      
      $(window).on('mousemove', function(e) {
        mousePosition = { x: e.pageX, y: e.pageY };
      })
      $(window).on('mousedown', function(e) { mouseDown = true; });
      $(window).on('mouseup', function(e) { mouseDown = false; });
      
      $(window).on('keydown', function(e) {
        if (e.keyCode == 32)
          $(window).trigger('space', e);
      });
      
      $(window).on('keyup', function(e) {
        if (e.keyCode == 32)
          $(window).trigger('spaceup', e);
      });
      
      $(window).on('space', function() { spacebar = true; });
      $(window).on('spaceup', function() { spacebar = false; });
      
      var Inputs = new window.Inputs({
        mouse: function() {
          return new Point(mousePosition.x, mousePosition.y);
        },
        click: function() {
          return mouseDown;
        },
        spacebar: function() {
          return spacebar;
        }
      });
      var Map = new window.Map(width, height);
      var Game = new window.Game(Map, Inputs);
      
      var player = Game.spawnPlayer();
      window.setInterval(function(){
        Game.tick();
        updatePlayer();
        updateLasers();
        updateBugs();
        Game.checkCollisions();
      }, 16);
      
      function updatePlayer() {
        var playerSprite = field.selectAll('image.player').data([player]);
        playerSprite.enter().append('image');
        playerSprite
          .attr('class', 'player')
          .attr('xlink:href', 'images/babyjoel.png')
          .attr('height', 25)
          .attr('width', 25)
          .attr('transform', function(d) { return buildTransformString(d.position.x - d.drawOffset.x, d.position.y - d.drawOffset.y, d.angle, d.rotateOffset.x, d.rotateOffset.y); });
      }
      
      function buildTransformString(x, y, angle, rotateX, rotateY) {
        return "translate( " + x + "," + y + ") rotate(" + angle + " " + rotateX + " " + rotateY + ")";
      }
      
      function updateLasers() {
        var laserSprites = field.selectAll('rect.laser').data(Game.lasers);
        laserSprites.enter()
          .append('rect');
        
        laserSprites
          .attr('class', 'laser')
          .attr('height', 2)
          .attr('width', 12)
          .attr('transform', function(d) { return buildTransformString(d.position.x - d.drawOffset.x, d.position.y - d.drawOffset.y, d.angle, d.rotateOffset.x, d.rotateOffset.y); });
      }
      
      function updateBugs() {
        var bugSprites = field.selectAll('image.bug').data(Game.bugs);
        bugSprites.enter()
          .append('image');
        
        bugSprites
          .attr('class', 'bug')
          .attr('xlink:href', 'images/bug.png')
          .attr('height', 25)
          .attr('width', 25)
          .attr('transform', function(d) { return buildTransformString(d.position.x - d.drawOffset.x, d.position.y - d.drawOffset.y, d.angle, d.rotateOffset.x, d.rotateOffset.y); });
          
        var hitBoxes = [];
        for(var i = 0; i < Game.bugs.length; i++) {
          hitBoxes.push(Game.bugs[i].hitBox());
        }
        var bugHitBoxes = field.selectAll('circle.hitBox').data(hitBoxes);
        bugHitBoxes.enter().append('circle');
        
        bugHitBoxes
          .attr('class', 'hitBox')
          .attr('cx', function(d) { return d.pos.x; })
          .attr('cy', function(d) { return d.pos.y; })
          .attr('r', function(d) { return d.r })
          .attr('fill', 'none')
          .attr('stroke', 'black');
          
        var hitBoxLines = [];
        for(var i = 0; i < Game.lasers.length; i++) {
          var box = Game.lasers[i].hitBox();
          for(var j = 0; j < box.calcPoints.length-1; j++) {
            hitBoxLines.push({
              x1: box.pos.x + box.calcPoints[j].x,
              y1: box.pos.y + box.calcPoints[j].y,
              x2: box.pos.x + box.calcPoints[j+1].x,
              y2: box.pos.y + box.calcPoints[j+1].y
            });
          }
          hitBoxLines.push({
            x1: box.pos.x + box.calcPoints[j].x,
            y1: box.pos.y + box.calcPoints[j].y,
            x2: box.pos.x + box.calcPoints[0].x,
            y2: box.pos.y + box.calcPoints[0].y
          });
        }
        
        var laserHitBoxes = field.selectAll('line.hitBox').data(hitBoxLines);
        laserHitBoxes.enter().append('line');
        
        laserHitBoxes
          .attr('class', 'hitBox')
          .attr('x1', function(d) { return d.x1; })
          .attr('y1', function(d) { return d.y1; })
          .attr('x2', function(d) { return d.x2; })
          .attr('y2', function(d) { return d.y2; })
          .attr('style', "stroke:rgb(255,0,0);stroke-width:1");
      }
    });
  </script>
</body>
</html>