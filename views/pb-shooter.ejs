<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>HTML5 boilerplate – all you really need…</title>
  <link rel="stylesheet" href="css\app.css">
  <!--[if IE]>
  	<script src="http://html5shiv.googlecode.com/svn/trunk/html5.js"></script>
  <![endif]-->
  <style type="text/css">

  </style>
</head>

<body>
  <script type="text/javascript" src="js\vendor\jquery-1.11.1.min.js"></script>
  <script type="text/javascript" src="js\vendor\knockout-3.2.0.js"></script>
  <script type="text/javascript" src="js\vendor\jquery.form.min.js"></script>
  <script type="text/javascript" src="js\vendor\d3.v3.min.js" charset="utf-8"></script>
  <script type="text/javascript" src="js\vendor\SAT.min.js"></script>
  <script type="text/javascript" src="js\augment.js"></script>
  <script src="/socket.io/socket.io.js"></script>
  
  <div id="screen" style="width: 1400px; height: 500px; border: 1px solid black; margin-top: 10px; margin-left: 10px;">
  </div>
  
  <script>
    $(function() {
      var io = window.io.connect('https://sandbox-joelhoward0.c9.io');
      var width = 1400; var height = 500;
      var field = d3.select('#screen').append('svg');
      
      var gameStateBuffer = [];
      var pause = false;
      var gameTime = 0;
      var maxLatency = 400;
      var latencies = [];
      
      io.on('tick', function(gameState) {
        gameTime = gameState.time;
        gameStateBuffer.push(gameState);
      });
      
      window.setInterval(tick, 16);
      
      function tick() {
        if (gameStateBuffer.length < 10)
          pause = true;
        if (gameStateBuffer.length > 50)
          pause = false;
        
        if (pause)
          return;
          
        var gameState = gameStateBuffer.shift();
        while (gameState.time < (gameTime - 500)) {
          gameState = gameStateBuffer.shift();
        }
        
        updateLatency(gameTime - gameState.time);
        updateBugs(gameState.bugs);
      }
      
      function updateLatency(latency) {
        latencies.push(latency);
        if (latencies.length > 50)
          latencies.shift();
          
        var averageLatency = d3.mean(latencies);
        
        var latencySprite = field.selectAll('text.latency').data([averageLatency]);
        latencySprite.enter().append('text');
        
        latencySprite
          .attr('class', 'latency')
          .attr('x', 10)
          .attr('y', 25)
          .text(function(d) { return d3.round(d); });
      }
      
      function updateBugs(bugs) {
        field.selectAll('image.bug').remove();
        var bugSprites = field.selectAll('image.bug').data(bugs);
        bugSprites.enter()
          .append('image');
        
        bugSprites
          .attr('class', 'bug')
          .attr('xlink:href', 'images/bug.png')
          .attr('height', 25)
          .attr('width', 25)
          .attr('transform', function(d) { return buildTransformString(d.position.x - d.drawOffset.x, d.position.y - d.drawOffset.y, d.angle, d.drawOffset.x, d.drawOffset.y); });
      }
      
      function buildTransformString(x, y, angle, rotateX, rotateY) {
        return "translate( " + x + "," + y + ") rotate(" + angle + " " + rotateX + " " + rotateY + ")";
      }
    });
  </script>
</body>
</html>